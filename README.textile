h1. nib2objc - NIB to Objective-C converter

This utility converts NIB files (or XIB ones) into Objective-C code, including all the properties of each instance, the documented constructor calls, and also the view hierarchy. It uses the output of the ibtool utility bundled with the Xcode tools. For more information about ibtool, please check "the ibtool man page":http://developer.apple.com/DOCUMENTATION/DARWIN/Reference/ManPages/man1/ibtool.1.html.

h2. Usage

Compile and put the utility in your path, and then call

<pre>
nib2objc yourfile.xib > code.m
</pre>

This will generate a file with the output of the conversion, similar to this (check out the included sample.m file for the full version):

<pre>
    // ...
    UIView *view6 = [[UIView alloc] initWithFrame:CGRectMake(0.0, 0.0, 320.0, 460.0)];
    view6.frame = CGRectMake(0.0, 0.0, 320.0, 460.0);
    view6.alpha = 1.000;
    view6.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    view6.backgroundColor = [UIColor colorWithWhite:0.750 alpha:1.000];
    view6.clearsContextBeforeDrawing = NO;
    // ...

    UIButton *view9 = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    view9.frame = CGRectMake(167.0, 65.0, 72.0, 37.0);
    view9.adjustsImageWhenDisabled = YES;
    view9.adjustsImageWhenHighlighted = YES;
    view9.alpha = 1.000;
    view9.autoresizingMask = UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleBottomMargin;
    view9.clearsContextBeforeDrawing = NO;
    view9.clipsToBounds = NO;
    view9.contentHorizontalAlignment = UIControlContentHorizontalAlignmentCenter;
    // ...
    [view9 setTitleShadowColor:[UIColor colorWithWhite:0.000 alpha:1.000] forState:UIControlStateSelected];

    // ...
    [view6 addSubview:view9];
    // ...
</pre>

The generated code takes into account the real class hierarchies in the UIKit, and it outputs the correct constructors and/or method calls for each object, depending on its class, including the enum values corresponding to the properties using them.

h2. Limitations

* For the moment this utility only works for UIKit views (iPhone), but it should be easy to extend to those of the AppKit too.
* It cannot output the values of UIImage, NSLocale or NSTimeZone properties, because ibtool does not support them.
* It does not distinguishes default values for properties, and as such, it outputs all the information it can find about a particular instance.
